[{"title":"2019-10-16-JavaScript核心概念-LHS、RHS是什麼？","url":"%2F2019%2F10%2F16%2F2019-10-16-JavaScript%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-LHS%E3%80%81RHS%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%2F","content":"首先，當我們在原始碼上使用到錯誤的語法時，console 都會顯示錯誤，這是原始碼在直譯器編譯過程中發生了錯誤。從下圖來看，我們在賦予字串這個值時，少了一個引號，console.log 則是少了括號，造成直譯器無法編譯。\n&nbsp; \n![原始碼語法錯誤](https://i.imgur.com/896UsRg.png)\n因此，我們在撰寫 JavaScript 時，可能會很常在變數與值的語法上發生一些錯誤，接下來我們將了解 LHS 和 RHS 概念，用來排除錯誤。\nLHS 和 RHS 概念是對變數與值的查詢、操作，其區分如下：\n- LHS (Left-hand Side)\n  - 用來賦予值到左側的變數上\n- RHS (Right-hand Side)\n  - 取得來自於右側變數上的值\n\n## LHS (Left-hand Side)\n從圖中的範例我們可以看到，在編譯過程中這邊宣告一個變數並將值賦予到左側的變數上，這個過程稱為 LHS 。\n但是，若我們將左側改成字串，並賦予 1 這個值呢？\n我們可以發現 console 會出現錯誤，這個錯誤是指左邊的變數是無法被賦予的，因此當我們在開發時出現這樣的錯誤就可以對此進行修正。**另外，這段錯誤是屬於編譯過程中所發生的錯誤，在這樣的情形下會連編譯的結果都無法生成。**\n&nbsp; \n![LHS編譯錯誤](https://i.imgur.com/novMzfY.png)\n## RHS (Right-hand Side)\n從圖中的範例我們可以看到，宣告一個 ASin 變數並從右邊的 style 變數取得他的值，我們稱為 RHS，同樣的第一個console.log() 從右邊的 ASin 取得值，並呈現在 console 中也是 RHS 。\n那 RHS 可能會發生什麼樣的錯誤呢？\n當我們console.log()去取一個未宣告的變數時，他就會產生錯誤。但是，這邊要注意的是，我們可以發現console.log(ASi)是我們在輸入執行後才產生沒有定義的錯誤，並不是在編譯過程就產生錯誤，所以我們可以下一個結論，**RHS 在編譯過程中不會產生錯誤，而是在執行時才發現錯誤**。\n&nbsp; \n![RHS概念](https://i.imgur.com/USOiiUi.png)\n\n","tags":["JavaScript"],"categories":["JavaScript核心概念"]},{"title":"JavaScript核心概念-JavaScript是如何運行？","url":"%2F2019%2F10%2F16%2F2019-10-16-JavaScript%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-JavaScript%E6%98%AF%E5%A6%82%E4%BD%95%E9%81%8B%E8%A1%8C%EF%BC%9F%2F","content":" \b\b在瞭解JavaScript是如何運行前，我們要先瞭解在 script 中所寫的原始碼電腦是無法直接解讀的，這些語法都要轉換成電腦看得懂的代碼才有辦法運行，而語法的轉換則分成兩種，編譯式語言與直譯式語言：\n ## 編譯式語言(Compiled language)\n在我們寫好原始碼時，會先透過編譯器(compiler)**預先編譯完成**並生成代碼，電腦才會解讀並執行，這樣的語言有下列幾項特色：\n- 編譯時即可除錯。\n- 預先定義的型別。\n- 型別檢查 (type check)。\n- 擁有高效能的執行速度等特性。\n- 可獨立執行。\n\n![編譯式語言](https://i.imgur.com/piO5rg7.png)\n## 直譯式語言(Interpreted language)\n不同於編譯式語言，直譯式語言在執行時會一行一行的動態將程式碼直譯為代碼，並執行，因此會有下列的特色：\n- 錯誤直接反映在環境上。\n- 不用預先定義的型別。\n- 動態生成。\n- 程式彈性。\n- 速度會比編譯式語言要慢一些。\n- 無法獨立運行，可用的功能由執行環境所提供。\n\n![直譯式語言](https://i.imgur.com/0ffPBoS.png)\n\n## JavaScript 直譯器的轉換過程\n在直譯器的轉換過程中，首先會將語法單元化（Tokenizing），然後透過抽象結構樹（Abstract Syntax Tree ）將原始碼的結構定義出來，最後生成代碼運行。\n![JavaScript直譯器轉換過程](https://i.imgur.com/l9LoxoY.png)\n接下來我們利用 <https://esprima.org/demo/parse.html> 來解析轉換得過程。\n### 語法單元化\n從下圖我們可以看到，我們所寫語法的每個單詞都會被單元化並解析為各種 type，例如 var  他並不會知道他有宣告變數的功能，而是辨識它為關鍵字，= 也不會知道它有賦予值的功能，而辨識它是一個標點符號。\n![語法單元化](https://i.imgur.com/HpWBe9D.png)\n### 抽象結構樹\n抽象結構樹會針對我們原本所要做的行為（這邊我們主要行為是宣告一個變數）來帶入不同的方法，在圖的下方有個 kind ，可以知道我們用來定義變數的方法是 var，若我們改成 ES6 中的 let 來宣告變數，則 kind 會變成 let。\n![抽象結構樹-宣告變數](https://i.imgur.com/TqmBcEG.png)\n![抽象結構樹-宣告變數](https://i.imgur.com/2fhZJXG.png)\n另外，我們知道當沒使用 var 宣告變數，而是直接對變數賦予值時會變成全域變數，從抽象結構樹也可以看到兩種方式的差別，一種是使用 VariableDeclarator 變數宣告的方法，直接賦予值是使用 AssignmentExpression 指派的方法。\n![抽象結構樹-宣告變數](https://i.imgur.com/yeOXKdA.png)\n","tags":["JavaScript"],"categories":["JavaScript核心概念"]},{"title":"JavaScript - 取得當前時間的方法","url":"%2F2019%2F10%2F15%2F2019-8-16-JavaScript%E5%8F%96%E5%BE%97%E7%95%B6%E5%89%8D%E6%99%82%E9%96%93%2F","content":"\n## 建立 Date() 物件\n\n在 JavaScript 中取得時間資訊需使用 Date() 物件來指向某一個時間點，透過物件內建的函式來取得相關資訊。\n取得時間的資訊有兩種方式，第一種是透過 Date.now() 來取得時間戳記（tiemstamp,毫秒），第二種是透過建構式建立 Date()物件，物件會回傳目前時間資訊的日期物件，然後就可以利用內建的函式來取得資訊。\n以下為取得各資訊的函式：\n\n```javascript\nDate.now()                            //  回傳當前的時間戳記timestamp（毫秒）\nlet today = new Date()                //  回傳目前時間的日期物件，利用today變數來儲存資訊\ntoday.getTime()                       //  輸入時間物件，回傳特定時間的 timestamp（毫秒）\ntoday.getFullYear()\ntoday.getMonth()                      //  回傳數值，取得月份，月份 0 表示 1 月！\ntoday.getDate()                       //  回傳數值，取得幾號\ntoday.getDay()                        //  回傳數值，取得星期幾\ntoday.getSeconds()                    //  回傳數值，取得秒資訊\ntoday.getMinutes()                    //  回傳數值，取得分資訊\ntoday.getHours()                      //  回傳數值，取得小時資訊\n\n```\n\n範例：\n\n```javascript\nlet today = new Date()                //  回傳目前時間的日期物件\nlet yyyy = today.getFullYear()\n//這邊利用三元運算來補0\nlet mm = (today.getMonth() + 1 < 10 ? '0' : '') + (today.getMonth() + 1)\nlet dd = (today.getDate() < 10 ? '0' : '') + today.getDate()\nconsole.log(yyyy + '-' + mm + '-' + dd)\n```\n![範例結果](https://i.imgur.com/YO7rq2o.png)\n這邊要注意的是，在取得月份的時候，函式所回傳的資料是從 0 開始，也就是月份會回傳0 ~ 11，代表 1 ~ 12 月，所以我們要自己補 1 才是正確的月份。\n另外，也可以透過三元運算來為個位數的月份及日來補 0 。\n\n最後，如果我們有一筆 tiemstamp 的資料要轉換成我們看得懂的格式，該如何做呢？\n\n```javascript\nlet tiemstamp = 1237648595747\nlet day = new Date(tiemstamp)                \nlet yyyy = day.getFullYear()\nlet mm = (day.getMonth() + 1 < 10 ? '0' : '') + (day.getMonth() + 1)\nlet dd = (day.getDate() < 10 ? '0' : '') + day.getDate()\nconsole.log(yyyy + '-' + mm + '-' + dd)\n```\n![範例結果](https://i.imgur.com/OYvtxoD.png)\n\n","tags":["JavaScript"]},{"title":"JavaScript - 關於物件存取屬性的方法","url":"%2F2019%2F08%2F16%2F2019-8-16-about-assess-object's%20properties%2F","content":"\n## 點記法 (Dot notation)\n\n我們可透過點記法來存取物件的屬性與函式。為了存取物件內所*封裝*的東西，我們需要輸入物件名稱 (這裡是 person)，來作為*命名空間 (Namespace)*。接著寫一個「點」以及想存取的項目，可能是簡單屬性的名稱、陣列屬性的項目，又或是針對物件函式之一的呼叫。舉例來說：\n\n```javascript\nvar person = {\n  name: {\n    first: '弟弟',\n    last: '帥氣'\n  },\n  age: 20,\n  interests: ['打球', '看電視', '睡覺'],\n  sayHello: function() {\n    console.log('Hello')\n  }\n}\n```\n\n```javascript\nperson.age //目標物件的屬性，20\nperson.interests[1] //陣列屬性，看電視\nperson.sayHello() //呼叫函式，Hello\n```\n\n## 括弧記法 (Bracket notation)\n\n括弧記法則是另一個存取屬性的方法，是透過各屬性相關的名稱來選擇項目\n\n```javascript\nperson['age'] // 20\nperson['name']['first'] // 弟弟\n```\n","tags":["JavaScript"]}]